#region License
// 
// Author: Joe McLain <nmp.developer@outlook.com>
// Copyright (c) 2013, Joe McLain and Digital Writing
// 
// Licensed under Eclipse Public License, Version 1.0 (EPL-1.0)
// See the file LICENSE.txt for details.
// 
#endregion
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;


using NmpBase;


#pragma warning disable 618

namespace Nmp.Builtin.Macros {



	/////////////////////////////////////////////////////////////////////////////

	class IsMacros : MacroContainer {

		//IMacroProcessor mp;


		/////////////////////////////////////////////////////////////////////////////
		//
		// #isempty( string )
		//
		/////////////////////////////////////////////////////////////////////////////

		string Combine( string value, string [] extra )
		{
			if( 0 == extra.Length ) {
				return value;
			}

			var sb = new StringBuilder( value );
			foreach( var item in extra ) {
				sb.Append( item );
			}

			return sb.ToString();
		}


		/////////////////////////////////////////////////////////////////////////////

		public object Empty( string value, params string [] extra )
		{
			value = Combine( value, extra );
			return string.IsNullOrEmpty( value );
		}


		/////////////////////////////////////////////////////////////////////////////

		public object Empty()
		{
			return true;
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #isnotempty( string )
		//
		// return true or false
		//
		/////////////////////////////////////////////////////////////////////////////

		public object NotEmpty( string value, params string [] extra )
		{
			value = Combine( value, extra );
			return !string.IsNullOrEmpty( value );
		}


		/////////////////////////////////////////////////////////////////////////////

		public object NotEmpty()
		{
			return false;
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #isequal( string 1, string 2 )
		//
		// return true or false
		//
		/////////////////////////////////////////////////////////////////////////////

		public object Equal( object lhs, object rhs )
		{
			return lhs.Equals( rhs );
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #isnotequal( string 1, string 2 )
		//
		// return true or false
		//
		/////////////////////////////////////////////////////////////////////////////

		public object NotEqual( object lhs, object rhs )
		{
			return ! lhs.Equals( rhs );
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #istrue( string )
		//
		// return true or false
		//
		/////////////////////////////////////////////////////////////////////////////

		public object True( object value, params object [] extra )
		{
			return Helpers.IsMacroTrue( value );
		}


		/////////////////////////////////////////////////////////////////////////////

		public object True()
		{
			return false;
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #isfalse( string )
		//
		// return true or false
		//
		/////////////////////////////////////////////////////////////////////////////

		public object False( object value, params object [] extra )
		{
			return !Helpers.IsMacroTrue( value );
		}


		/////////////////////////////////////////////////////////////////////////////

		public object False()
		{
			return true;
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #defined
		//
		// true or false are returned if there are not
		// enough return arguments
		//
		/////////////////////////////////////////////////////////////////////////////

		public object Defined( string macroName, params string [] extra )
		{
			macroName = Combine( macroName, extra );
			return mp.IsMacroName( macroName );
		}


		/////////////////////////////////////////////////////////////////////////////

		public object Defined()
		{
			return false;
		}


		/////////////////////////////////////////////////////////////////////////////
		//
		// #isnotdefined
		//
		// return true or false
		//
		/////////////////////////////////////////////////////////////////////////////

		public object NotDefined( string macroName, params string [] extra )
		{
			return ! mp.IsMacroName( macroName );
		}


		/////////////////////////////////////////////////////////////////////////////

		public object NotDefined()
		{
			return true;
		}


		/////////////////////////////////////////////////////////////////////////////

		public IsMacros( IMacroProcessor mp )
			:	base(mp)
		{
			//this.mp = mp;
		}


	}


}
